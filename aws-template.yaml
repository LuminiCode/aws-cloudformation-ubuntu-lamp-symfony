AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack
  using a single EC2 instance and a local MySQL database for storage
  **WARNING** This template creates an Amazon EC2 instance.
  You will be billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database settings"
        Parameters:
          - DBName
          - DBUser
          - DBPassword
          - DBRootPassword
      - Label:
          default: "Symfony settings"
        Parameters:
          - NewSymfonyInstallation
          - GithubUser
          - GithubPassword
    ParameterLabels:
      VPCID:
        default: "Cool new project is coming soon!"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  NewSymfonyInstallation:
    Default: true
    Description : 'Create a new symfony or take an existing project from github'
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  GithubUser:
    Description: User for GitHub access (only if you want to install an existing Project)
    Type: String
    MinLength: '0'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  GithubPassword:
    NoEcho: 'true'
    Description: Password for GitHub access (only if you want to install an existing Project)
    Type: String
    MinLength: '0'
    MaxLength: '41'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0ac05733838eabc06
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: Ubuntu16 Web + SSH Server
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64':
          !Sub |
          #!/bin/bash
          set -e
          set -x
          # Set timezone
          #sudo timedatectl set-timezone America/New_York

          # Upgrade
          sudo apt-get update
          # sudo apt-get upgrade -y

          # install mysql-server
          sudo apt-get install -y mysql-server
          sudo apt-get install mysql-client
          sudo apt-get install -y libmysqlclient-dev

          # install apache2
          sudo apt-get install -y apache2
          sudo apt-get install apache2-doc
          sudo apt-get install apache2-utils

          # install php
          sudo apt-get install -y libapache2-mod-php7.2
          sudo apt-get install php7.2
          sudo apt-get install php7.2-common
          sudo apt-get install php7.2-curl
          sudo apt-get install -y php7.2-dev
          sudo apt-get install -y php7.2-gd
          sudo apt-get install php-pear
          sudo apt-get install -y php-imagick
          sudo apt-get install php7.2-mysql
          sudo apt-get install -y php7.2-ps
          sudo apt-get install php7.2-xsl
          sudo apt-get install -y libmcrypt-dev
          sudo apt-get install php7.2-mbstring

          # install python3
          sudo apt install python3

          # install zip & unzip
          sudo apt-get install -y zip
          sudo apt-get install -y unzip

          # install composer
          sudo php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          sudo php composer-setup.php
          sudo php -r "unlink('composer-setup.php');"
          sudo mv composer.phar /usr/local/bin/composer

          # install git
          sudo apt-get install git

          # set apache2 directory for symfony
          a='DocumentRoot /var/www/html'
          b='DocumentRoot /var/www/html/'"${AWS::StackName}"''/public
          sudo sed -i 's,'"$a"','"$b"',' /etc/apache2/sites-available/000-default.conf

          # set mysql
          sudo mysql -e "CREATE DATABASE ${DBName} /*\!40100 DEFAULT CHARACTER SET utf8 */;"
          sudo mysql -e "CREATE USER ${DBUser}@localhost IDENTIFIED BY '${DBPassword}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON ${DBName}.* TO '${DBUser}'@'localhost';"
          sudo mysql -e "FLUSH PRIVILEGES;"

          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${DBRootPassword}';"

          # install phpmyadmin
          # Download & unzip the last phpMyAdmin-version
          wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.zip
          unzip phpMyAdmin-latest-all-languages.zip
          # create folder /var/www/phpmyadmin and copy the unziped file
          sudo mkdir /var/www/phpmyadmin
          sudo cp -r phpMyAdmin-*/* /var/www/phpmyadmin/
          # change rights
          sudo chown -R ubuntu:ubuntu /var/www/phpmyadmin
          sudo chmod -R 755 /var/www/phpmyadmin
          # set configuration
          sudo curl https://raw.githubusercontent.com/LuminiCode/aws-cloudformation-ubuntu-lamp-symfony/master/settings/phpmyadmin.txt -o /etc/apache2/conf-available/phpmyadmin.conf
          # Activate Configuration
          sudo a2enconf phpmyadmin
          # solve tmp error
          sudo mkdir /var/www/phpmyadmin/tmp
          sudo mkdir /var/www/phpmyadmin/tmp/twig
          sudo chown -R ubuntu:ubuntu /var/www/phpmyadmin/tmp
          sudo chmod -R 777 /var/www/phpmyadmin/tmp
          sudo chown -R ubuntu:ubuntu /var/www/phpmyadmin/tmp/twig
          sudo chmod -R 777 /var/www/phpmyadmin/tmp/twig
          c="define('TEMP_DIR', './tmp/');"
          d="define('TEMP_DIR', '/var/www/phpmyadmin/tmp');"
          sudo sed -i "s|$c|$d|g" /var/www/phpmyadmin/libraries/vendor_config.php
          # solve configuration error (blowfish_secret)
          e="define('CONFIG_DIR', '');"
          f="define('CONFIG_DIR', '/var/www/phpmyadmin/');"
          sudo sed -i "s|$e|$f|g" /var/www/phpmyadmin/libraries/vendor_config.php
          mv /var/www/phpmyadmin/config.sample.inc.php /var/www/phpmyadmin/config.inc.php
          NEW_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
          j="blowfish_secret'] = '';"
          k="blowfish_secret'] = '$NEW_PASSWORD';"
          sudo sed -i "s|$j|$k|g" /var/www/phpmyadmin/config.inc.php

          sudo systemctl reload apache2

          # configure php.ini
          sudo sed -i 's/memory_limit = .*/memory_limit = '512M'/' /etc/php/7.2/apache2/php.ini

          # restart apache
          sudo /etc/init.d/apache2 restart

          if [ "${NewSymfonyInstallation}" == "true" ]
          then
              # install new symfonfy project
              cd /var/www/html
              export COMPOSER_HOME="$HOME/.config/composer";
              composer create-project symfony/website-skeleton ${AWS::StackName}
              composer clear

              # change database-settings in the symfony .env file
              x='DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name'
              y='DATABASE_URL=mysql://'"${DBUser}"':'"${DBPassword}"'@localhost/'"${DBName}"''
              sed -i 's,'"$x"','"$y"',' /var/www/html/${AWS::StackName}/.env
          else
              # install an existing project from github
              # !! edit !! the following script (the following script is on github)
              mkdir /var/www/html/settings
              sudo curl https://${GithubUser}:${GithubPassword}@raw.githubusercontent.com/LuminiCode/symfony/master/aws-install-script-sg.sh -o /var/www/html/settings/aws-install-script-sg.sh
              bash /var/www/html/settings/aws-install-script-sg.sh ${GithubUser} ${GithubPassword} ${AWS::StackName} ${DBUser} ${DBPassword} ${DBName}
          fi

          # set ubuntu as the owner of document root
          sudo chown ubuntu:ubuntu /var/www/html/ -R

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebServerInstance
          - PublicDnsName
